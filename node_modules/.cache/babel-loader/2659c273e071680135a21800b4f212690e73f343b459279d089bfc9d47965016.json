{"ast":null,"code":"import _slicedToArray from \"/Users/onuryilmaz/Desktop/Workspace/Tokyay/Business/WEB/blackdawn/web/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport storage from './storage';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nexport default function useLocalStorageStateBase(key, defaultValue) {\n  // we don't support updating the `defaultValue` the same way `useState()` doesn't support it\n  var _useState = useState(function () {\n      var isCallable = function isCallable(value) {\n        return typeof value === 'function';\n      };\n      return isCallable(defaultValue) ? defaultValue() : defaultValue;\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    defaultValueState = _useState2[0];\n  var getDefaultState = useCallback(function () {\n    return {\n      value: storage.get(key, defaultValueState),\n      isPersistent: function () {\n        /**\n         * We want to return `true` on the server. If you render a message based on `isPersistent` and the\n         * server returns `false` then the message will flicker until hydration is done:\n         * `{!isPersistent && <span>You changes aren't being persisted.</span>}`\n         */\n        if (typeof window === 'undefined') {\n          return true;\n        }\n        try {\n          localStorage.setItem('__ulss', '#');\n          localStorage.removeItem('__ulss');\n          return true;\n        } catch (_a) {\n          return false;\n        }\n      }()\n    };\n  }, [defaultValueState, key]);\n  var _useState3 = useState(getDefaultState),\n    _useState4 = _slicedToArray(_useState3, 2),\n    state = _useState4[0],\n    setState = _useState4[1];\n  var updateValue = useMemo(function () {\n    var fn = function fn(newValue) {\n      var isCallable = function isCallable(value) {\n        return typeof value === 'function';\n      };\n      if (isCallable(newValue)) {\n        setState(function (state) {\n          return {\n            value: newValue(state.value),\n            isPersistent: storage.set(key, newValue(state.value))\n          };\n        });\n      } else {\n        setState({\n          value: newValue,\n          isPersistent: storage.set(key, newValue)\n        });\n      }\n    };\n    fn.reset = function () {\n      storage.remove(key);\n      setState(function (state) {\n        return {\n          value: defaultValueState,\n          isPersistent: state.isPersistent\n        };\n      });\n    };\n    return fn;\n  }, [key, defaultValueState]);\n  /**\n   * Syncs changes across tabs and iframe's.\n   */\n  useEffect(function () {\n    var onStorage = function onStorage(e) {\n      if (e.storageArea === localStorage && e.key === key) {\n        setState({\n          value: storage.get(key, defaultValueState),\n          isPersistent: true\n        });\n      }\n    };\n    window.addEventListener('storage', onStorage);\n    return function () {\n      return window.removeEventListener('storage', onStorage);\n    };\n  }, [key, defaultValueState]);\n  /**\n   * Update the state when the `key` property changes.\n   */\n  var isFirstRender = useRef(true);\n  useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    setState(getDefaultState());\n  }, [getDefaultState]);\n  return [state.value, updateValue, state.isPersistent];\n}","map":{"version":3,"names":["storage","useCallback","useEffect","useMemo","useRef","useState","useLocalStorageStateBase","key","defaultValue","isCallable","value","defaultValueState","getDefaultState","get","isPersistent","window","localStorage","setItem","removeItem","_a","state","setState","updateValue","fn","newValue","set","reset","remove","onStorage","e","storageArea","addEventListener","removeEventListener","isFirstRender","current"],"sources":["/Users/onuryilmaz/Desktop/Workspace/Tokyay/Business/WEB/blackdawn/web/node_modules/use-local-storage-state/es/src/useLocalStorageStateBase.js"],"sourcesContent":["import storage from './storage';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nexport default function useLocalStorageStateBase(key, defaultValue) {\n    // we don't support updating the `defaultValue` the same way `useState()` doesn't support it\n    const [defaultValueState] = useState(() => {\n        const isCallable = (value) => typeof value === 'function';\n        return isCallable(defaultValue) ? defaultValue() : defaultValue;\n    });\n    const getDefaultState = useCallback(() => {\n        return {\n            value: storage.get(key, defaultValueState),\n            isPersistent: (() => {\n                /**\n                 * We want to return `true` on the server. If you render a message based on `isPersistent` and the\n                 * server returns `false` then the message will flicker until hydration is done:\n                 * `{!isPersistent && <span>You changes aren't being persisted.</span>}`\n                 */\n                if (typeof window === 'undefined') {\n                    return true;\n                }\n                try {\n                    localStorage.setItem('__ulss', '#');\n                    localStorage.removeItem('__ulss');\n                    return true;\n                }\n                catch (_a) {\n                    return false;\n                }\n            })(),\n        };\n    }, [defaultValueState, key]);\n    const [state, setState] = useState(getDefaultState);\n    const updateValue = useMemo(() => {\n        const fn = (newValue) => {\n            const isCallable = (value) => typeof value === 'function';\n            if (isCallable(newValue)) {\n                setState((state) => ({\n                    value: newValue(state.value),\n                    isPersistent: storage.set(key, newValue(state.value)),\n                }));\n            }\n            else {\n                setState({\n                    value: newValue,\n                    isPersistent: storage.set(key, newValue),\n                });\n            }\n        };\n        fn.reset = () => {\n            storage.remove(key);\n            setState((state) => ({\n                value: defaultValueState,\n                isPersistent: state.isPersistent,\n            }));\n        };\n        return fn;\n    }, [key, defaultValueState]);\n    /**\n     * Syncs changes across tabs and iframe's.\n     */\n    useEffect(() => {\n        const onStorage = (e) => {\n            if (e.storageArea === localStorage && e.key === key) {\n                setState({\n                    value: storage.get(key, defaultValueState),\n                    isPersistent: true,\n                });\n            }\n        };\n        window.addEventListener('storage', onStorage);\n        return () => window.removeEventListener('storage', onStorage);\n    }, [key, defaultValueState]);\n    /**\n     * Update the state when the `key` property changes.\n     */\n    const isFirstRender = useRef(true);\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        setState(getDefaultState());\n    }, [getDefaultState]);\n    return [state.value, updateValue, state.isPersistent];\n}\n"],"mappings":";AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,SAASC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACzE,eAAe,SAASC,wBAAwB,CAACC,GAAG,EAAEC,YAAY,EAAE;EAChE;EACA,gBAA4BH,QAAQ,CAAC,YAAM;MACvC,IAAMI,UAAU,GAAG,SAAbA,UAAU,CAAIC,KAAK;QAAA,OAAK,OAAOA,KAAK,KAAK,UAAU;MAAA;MACzD,OAAOD,UAAU,CAACD,YAAY,CAAC,GAAGA,YAAY,EAAE,GAAGA,YAAY;IACnE,CAAC,CAAC;IAAA;IAHKG,iBAAiB;EAIxB,IAAMC,eAAe,GAAGX,WAAW,CAAC,YAAM;IACtC,OAAO;MACHS,KAAK,EAAEV,OAAO,CAACa,GAAG,CAACN,GAAG,EAAEI,iBAAiB,CAAC;MAC1CG,YAAY,EAAG,YAAM;QACjB;AAChB;AACA;AACA;AACA;QACgB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;UAC/B,OAAO,IAAI;QACf;QACA,IAAI;UACAC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;UACnCD,YAAY,CAACE,UAAU,CAAC,QAAQ,CAAC;UACjC,OAAO,IAAI;QACf,CAAC,CACD,OAAOC,EAAE,EAAE;UACP,OAAO,KAAK;QAChB;MACJ,CAAC;IACL,CAAC;EACL,CAAC,EAAE,CAACR,iBAAiB,EAAEJ,GAAG,CAAC,CAAC;EAC5B,iBAA0BF,QAAQ,CAACO,eAAe,CAAC;IAAA;IAA5CQ,KAAK;IAAEC,QAAQ;EACtB,IAAMC,WAAW,GAAGnB,OAAO,CAAC,YAAM;IAC9B,IAAMoB,EAAE,GAAG,SAALA,EAAE,CAAIC,QAAQ,EAAK;MACrB,IAAMf,UAAU,GAAG,SAAbA,UAAU,CAAIC,KAAK;QAAA,OAAK,OAAOA,KAAK,KAAK,UAAU;MAAA;MACzD,IAAID,UAAU,CAACe,QAAQ,CAAC,EAAE;QACtBH,QAAQ,CAAC,UAACD,KAAK;UAAA,OAAM;YACjBV,KAAK,EAAEc,QAAQ,CAACJ,KAAK,CAACV,KAAK,CAAC;YAC5BI,YAAY,EAAEd,OAAO,CAACyB,GAAG,CAAClB,GAAG,EAAEiB,QAAQ,CAACJ,KAAK,CAACV,KAAK,CAAC;UACxD,CAAC;QAAA,CAAC,CAAC;MACP,CAAC,MACI;QACDW,QAAQ,CAAC;UACLX,KAAK,EAAEc,QAAQ;UACfV,YAAY,EAAEd,OAAO,CAACyB,GAAG,CAAClB,GAAG,EAAEiB,QAAQ;QAC3C,CAAC,CAAC;MACN;IACJ,CAAC;IACDD,EAAE,CAACG,KAAK,GAAG,YAAM;MACb1B,OAAO,CAAC2B,MAAM,CAACpB,GAAG,CAAC;MACnBc,QAAQ,CAAC,UAACD,KAAK;QAAA,OAAM;UACjBV,KAAK,EAAEC,iBAAiB;UACxBG,YAAY,EAAEM,KAAK,CAACN;QACxB,CAAC;MAAA,CAAC,CAAC;IACP,CAAC;IACD,OAAOS,EAAE;EACb,CAAC,EAAE,CAAChB,GAAG,EAAEI,iBAAiB,CAAC,CAAC;EAC5B;AACJ;AACA;EACIT,SAAS,CAAC,YAAM;IACZ,IAAM0B,SAAS,GAAG,SAAZA,SAAS,CAAIC,CAAC,EAAK;MACrB,IAAIA,CAAC,CAACC,WAAW,KAAKd,YAAY,IAAIa,CAAC,CAACtB,GAAG,KAAKA,GAAG,EAAE;QACjDc,QAAQ,CAAC;UACLX,KAAK,EAAEV,OAAO,CAACa,GAAG,CAACN,GAAG,EAAEI,iBAAiB,CAAC;UAC1CG,YAAY,EAAE;QAClB,CAAC,CAAC;MACN;IACJ,CAAC;IACDC,MAAM,CAACgB,gBAAgB,CAAC,SAAS,EAAEH,SAAS,CAAC;IAC7C,OAAO;MAAA,OAAMb,MAAM,CAACiB,mBAAmB,CAAC,SAAS,EAAEJ,SAAS,CAAC;IAAA;EACjE,CAAC,EAAE,CAACrB,GAAG,EAAEI,iBAAiB,CAAC,CAAC;EAC5B;AACJ;AACA;EACI,IAAMsB,aAAa,GAAG7B,MAAM,CAAC,IAAI,CAAC;EAClCF,SAAS,CAAC,YAAM;IACZ,IAAI+B,aAAa,CAACC,OAAO,EAAE;MACvBD,aAAa,CAACC,OAAO,GAAG,KAAK;MAC7B;IACJ;IACAb,QAAQ,CAACT,eAAe,EAAE,CAAC;EAC/B,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EACrB,OAAO,CAACQ,KAAK,CAACV,KAAK,EAAEY,WAAW,EAAEF,KAAK,CAACN,YAAY,CAAC;AACzD"},"metadata":{},"sourceType":"module","externalDependencies":[]}