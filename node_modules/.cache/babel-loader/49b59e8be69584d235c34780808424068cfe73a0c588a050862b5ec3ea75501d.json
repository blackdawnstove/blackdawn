{"ast":null,"code":"import { get as t, GLOBAL as o, set as r, remove as e } from \"@analytics/global-storage-utils\";\nexport { GLOBAL, globalContext } from \"@analytics/global-storage-utils\";\nimport { hasCookies as a, COOKIE as l, getCookie as i, setCookie as n, removeCookie as u } from \"@analytics/cookie-utils\";\nexport { COOKIE, getCookie, hasCookies, removeCookie, setCookie } from \"@analytics/cookie-utils\";\nimport { hasLocalStorage as c, LOCAL_STORAGE as s } from \"@analytics/localstorage-utils\";\nexport { LOCAL_STORAGE, hasLocalStorage } from \"@analytics/localstorage-utils\";\nimport { isObject as f, ANY as g, ALL as m, isUndefined as p, isString as v } from \"@analytics/type-utils\";\nexport { ALL, ANY } from \"@analytics/type-utils\";\nfunction y(t) {\n  var o = t;\n  try {\n    if (\"true\" === (o = JSON.parse(t))) return !0;\n    if (\"false\" === o) return !1;\n    if (f(o)) return o;\n    parseFloat(o) === o && (o = parseFloat(o));\n  } catch (t) {}\n  if (null !== o && \"\" !== o) return o;\n}\nvar S = c(),\n  k = a();\nfunction I(o, r) {\n  if (o) {\n    var e = L(r),\n      a = !A(e),\n      l = O(e) ? y(localStorage.getItem(o)) : void 0;\n    if (a && !p(l)) return l;\n    var n = b(e) ? y(i(o)) : void 0;\n    if (a && n) return n;\n    var u = t(o);\n    return a ? u : {\n      localStorage: l,\n      cookie: n,\n      global: u\n    };\n  }\n}\nfunction x(e, a, u) {\n  if (e && !p(a)) {\n    var c = {},\n      f = L(u),\n      g = JSON.stringify(a),\n      m = !A(f);\n    return O(f) && (c[s] = h(s, a, y(localStorage.getItem(e))), localStorage.setItem(e, g), m) ? c[s] : b(f) && (c[l] = h(l, a, y(i(e))), n(e, g), m) ? c[l] : (c[o] = h(o, a, t(e)), r(e, a), m ? c[o] : c);\n  }\n}\nfunction C(t, r) {\n  if (t) {\n    var a = L(r),\n      i = I(t, m),\n      n = {};\n    return !p(i.localStorage) && O(a) && (localStorage.removeItem(t), n[s] = i.localStorage), !p(i.cookie) && b(a) && (u(t), n[l] = i.cookie), !p(i.global) && d(a, o) && (e(t), n[o] = i.global), n;\n  }\n}\nfunction L(t) {\n  return t ? v(t) ? t : t.storage : g;\n}\nfunction O(t) {\n  return S && d(t, s);\n}\nfunction b(t) {\n  return k && d(t, l);\n}\nfunction A(t) {\n  return t === m || \"all\" === t;\n}\nfunction d(t, o) {\n  return t === g || t === o || A(t);\n}\nfunction h(t, o, r) {\n  return {\n    location: t,\n    current: o,\n    previous: r\n  };\n}\nvar N = {\n  setItem: x,\n  getItem: I,\n  removeItem: C\n};\nexport default N;\nexport { I as getItem, C as removeItem, x as setItem };","map":{"version":3,"mappings":";;;;;;;;SAMwBA,EAAMC;EAC5B,IAAIC,IAAQD;EACZ;IAEE,IAAc,YADdC,IAAQC,KAAKH,MAAMC,KACG;IACtB,IAAc,YAAVC,GAAmB;IACvB,IAAIE,EAASF,IAAQ,OAAOA;IACxBG,WAAWH,OAAWA,MACxBA,IAAQG,WAAWH;EAAAA,CAErB,QAAOI;EACT,IAAc,SAAVJ,KAA4B,OAAVA,GAGtB,OAAOA;AAAAA;ACbT,IAAMK,IAAaC;EACbC,IAAoBC;AAAAA,SASVC,EAAQC,GAAKC;EAC3B,IAAKD,GAAL;IACA,IAAME,IAAOC,EAAeF;MACtBG,KAAYC,EAAOH;MAGnBI,IAAaC,EAASL,KAAQd,EAAMoB,aAAaT,QAAQC,WAAQS;IACvE,IAAIL,MAAaM,EAAYJ,IAC3B,OAAOA;IAIT,IAAMK,IAAYC,EAAUV,KAAQd,EAAMyB,EAAUb,WAAQS;IAC5D,IAAIL,KAAYO,GACd,OAAOA;IAIT,IAAMG,IAAcC,EAAIf;IAExB,OAAOI,IAAWU,IAAc;MAC9BN,cAAcF;MACdU,QAAQL;MACRM,QAAQH;IAAAA;EAAAA;AAAAA;AAAAA,SAYII,EAAQlB,GAAKV,GAAOW;EAClC,IAAKD,MAAOU,EAAYpB,IAAxB;IAGA,IAAM6B,IAAO;MACPjB,IAAOC,EAAeF;MACtBmB,IAAY7B,KAAK8B,UAAU/B;MAC3BgC,KAAYjB,EAAOH;IAGzB,OAAIK,EAASL,OAEXiB,EAAKI,KAAiBC,EAAOD,GAAejC,GAAOF,EAAMoB,aAAaT,QAAQC,MAE9EQ,aAAaU,QAAQlB,GAAKoB,IACtBE,KACKH,EAAKI,KAKZX,EAAUV,OAEZiB,EAAKM,KAAUD,EAAOC,GAAQnC,GAAOF,EAAMyB,EAAUb,MAErD0B,EAAU1B,GAAKoB,IACXE,KACKH,EAAKM,MAKhBN,EAAKQ,KAAUH,EAAOG,GAAQrC,GAAOyB,EAAIf,KAEzC4B,EAAI5B,GAAKV,IAEDgC,IAAYH,EAAKQ,KAAUR;EAAAA;AAAAA;AAAAA,SASrBU,EAAW7B,GAAKC;EAC9B,IAAKD,GAAL;IACA,IAAME,IAAOC,EAAeF;MACtB6B,IAAS/B,EAAQC,GAAK+B;MAEtBZ,IAAO;IAgBb,QAfKT,EAAYoB,EAAOtB,iBAAiBD,EAASL,OAEhDM,aAAaqB,WAAW7B,IACxBmB,EAAKI,KAAiBO,EAAOtB,gBAE1BE,EAAYoB,EAAOd,WAAWJ,EAAUV,OAE3C8B,EAAahC,IACbmB,EAAKM,KAAUK,EAAOd,UAGnBN,EAAYoB,EAAOb,WAajBgB,EAbsC/B,GAarByB,OAZtBO,EAAOlC,IACPmB,EAAKQ,KAAUG,EAAOb,SAEjBE;EAAAA;AAAAA;AAGT,SAAShB,EAAegC;EACtB,OAAKA,IACEC,EAASD,KAAQA,IAAOA,EAAKE,UADlBC;AAAAA;AAQpB,SAAS/B,EAAS8B;EAEhB,OAAO1C,KAAcsC,EAAQI,GAASd;AAAAA;AAGxC,SAASX,EAAUyB;EAEjB,OAAOxC,KAAqBoC,EAAQI,GAASZ;AAAAA;AAG/C,SAASpB,EAAOgC;EACd,OAAOA,MAAYN,KAAmB,UAAZM;AAAAA;AAG5B,SAASJ,EAAQI,GAASnC;EACxB,OAAQmC,MAAYC,KAAOD,MAAYnC,KAAQG,EAAOgC;AAAAA;AAUxD,SAASb,EAAOe,GAAUC,GAASC;EACjC,OAAO;IAAEF;IAAUC;IAASC;EAAAA;AAAAA;AAyB9B,QAAe;EACbvB;EACAnB;EACA8B;AAAAA;AAAAA;AAAAA","names":["parse","input","value","JSON","isObject","parseFloat","e","hasStorage","hasLocalStorage","hasCookiesSupport","hasCookies","getItem","key","options","type","getStorageType","getFirst","useAll","localValue","useLocal","localStorage","undefined","isUndefined","cookieVal","useCookie","getCookie","globalValue","get","cookie","global","setItem","data","saveValue","stringify","setFirst","LOCAL_STORAGE","format","COOKIE","setCookie","GLOBAL","set","removeItem","values","ALL","removeCookie","useType","remove","opts","isString","storage","ANY","location","current","previous"],"sources":["/Users/onuryilmaz/Desktop/Workspace/Tokyay/Business/WEB/blackdawn/web/node_modules/@analytics/storage-utils/src/utils/parse.js","/Users/onuryilmaz/Desktop/Workspace/Tokyay/Business/WEB/blackdawn/web/node_modules/@analytics/storage-utils/src/index.js"],"sourcesContent":["import { isObject } from '@analytics/type-utils'\n/**\n * Safe JSON parse\n * @param  {*} input - value to parse\n * @return {*} parsed input\n */\nexport default function parse(input) {\n  let value = input\n  try {\n    value = JSON.parse(input)\n    if (value === 'true') return true\n    if (value === 'false') return false\n    if (isObject(value)) return value\n    if (parseFloat(value) === value) {\n      value = parseFloat(value)\n    }\n  } catch (e) { }\n  if (value === null || value === \"\") {\n    return\n  }\n  return value\n}\n","import { set, get, remove, globalContext, GLOBAL } from '@analytics/global-storage-utils'\nimport { getCookie, setCookie, removeCookie, hasCookies, COOKIE } from '@analytics/cookie-utils'\nimport { hasLocalStorage, LOCAL_STORAGE } from '@analytics/localstorage-utils'\nimport { isUndefined, isString, ANY, ALL } from '@analytics/type-utils'\nimport parse from './utils/parse'\n\n// Verify support\nconst hasStorage = hasLocalStorage()\nconst hasCookiesSupport = hasCookies()\n\n/**\n * Get storage item from localStorage, cookie, or window\n * @param  {string} key - key of item to get\n * @param  {object|string} [options] - storage options. If string location of where to get storage\n * @param  {string} [options.storage] - Define type of storage to pull from.\n * @return {Any}  the value of key\n */\nexport function getItem(key, options) {\n  if (!key) return\n  const type = getStorageType(options)\n  const getFirst = !useAll(type)\n\n  /* 1. Try localStorage */\n  const localValue = useLocal(type) ? parse(localStorage.getItem(key)) : undefined\n  if (getFirst && !isUndefined(localValue)) {\n    return localValue\n  }\n\n  /* 2. Fallback to cookie */\n  const cookieVal = useCookie(type) ? parse(getCookie(key)) : undefined\n  if (getFirst && cookieVal) {\n    return cookieVal\n  }\n\n  /* 3. Fallback to window/global. */\n  const globalValue = get(key)\n\n  return getFirst ? globalValue : {\n    localStorage: localValue,\n    cookie: cookieVal,\n    global: globalValue\n  }\n}\n\n/**\n * Store values in localStorage, cookie, or window\n * @param {string} key - key of item to set\n * @param {*} value - value of item to set\n * @param {object|string} [options] - storage options. If string location of where to get storage\n * @param {string} [options.storage] - Define type of storage to pull from.\n * @returns {object} returns old value, new values, & location of storage\n */\nexport function setItem(key, value, options) {\n  if (!key || isUndefined(value)) {\n    return\n  }\n  const data = {}\n  const type = getStorageType(options)\n  const saveValue = JSON.stringify(value)\n  const setFirst = !useAll(type)\n\n  /* 1. Try localStorage */\n  if (useLocal(type)) {\n    // console.log('SET as localstorage', saveValue)\n    data[LOCAL_STORAGE] = format(LOCAL_STORAGE, value, parse(localStorage.getItem(key)))\n    // Set LocalStorage item\n    localStorage.setItem(key, saveValue)\n    if (setFirst) {\n      return data[LOCAL_STORAGE]\n    }\n  }\n\n  /* 2. Fallback to cookie */\n  if (useCookie(type)) {\n    // console.log('SET as cookie', saveValue)\n    data[COOKIE] = format(COOKIE, value, parse(getCookie(key)))\n    // Set Cookie\n    setCookie(key, saveValue)\n    if (setFirst) {\n      return data[COOKIE]\n    }\n  }\n\n  /* 3. Fallback to window/global */\n  data[GLOBAL] = format(GLOBAL, value, get(key))\n  // Set global value\n  set(key, value)\n  // Return set value(s)\n  return (setFirst) ? data[GLOBAL] : data\n}\n\n/**\n * Remove values from localStorage, cookie, or window\n * @param {string} key - key of item to set\n * @param {object|string} [options] - storage options. If string location of where to get storage\n * @param {string} [options.storage] - Define type of storage to pull from.\n */\nexport function removeItem(key, options) {\n  if (!key) return\n  const type = getStorageType(options)\n  const values = getItem(key, ALL)\n\n  const data = {}\n  if (!isUndefined(values.localStorage) && useLocal(type)) {\n    /* 1. Try localStorage */\n    localStorage.removeItem(key)\n    data[LOCAL_STORAGE] = values.localStorage\n  }\n  if (!isUndefined(values.cookie) && useCookie(type)) {\n    /* 2. Fallback to cookie */\n    removeCookie(key)\n    data[COOKIE] = values.cookie\n  }\n  /* 3. Fallback to window/global */\n  if (!isUndefined(values.global) && useGlobal(type)) {\n    remove(key)\n    data[GLOBAL] = values.global\n  }\n  return data\n}\n\nfunction getStorageType(opts) {\n  if (!opts) return ANY\n  return isString(opts) ? opts : opts.storage\n}\n\nfunction useGlobal(storage) {\n  return useType(storage, GLOBAL)\n}\n\nfunction useLocal(storage) {\n  // If has localStorage and storage option not defined, or is set to 'localStorage' or '*'\n  return hasStorage && useType(storage, LOCAL_STORAGE)\n}\n\nfunction useCookie(storage) {\n  // If has cookies and storage option not defined, or is set to 'cookies' or '*'\n  return hasCookiesSupport && useType(storage, COOKIE)\n}\n\nfunction useAll(storage) {\n  return storage === ALL || storage === 'all'\n}\n\nfunction useType(storage, type) {\n  return (storage === ANY || storage === type || useAll(storage))\n}\n\n/**\n * Format response\n * @param {string} location \n * @param {*} current - current value\n * @param {*} previous - previous value\n * @returns \n */\nfunction format(location, current, previous) {\n  return { location, current, previous }\n}\n\n// const TYPES = {\n//   ALL,\n//   ANY,\n//   GLOBAL,\n//   COOKIE,\n//   LOCAL_STORAGE,\n// }\n\nexport {\n  ALL,\n  ANY,\n  GLOBAL,\n  COOKIE,\n  LOCAL_STORAGE,\n  getCookie,\n  setCookie,\n  removeCookie,\n  globalContext,\n  hasLocalStorage,\n  hasCookies\n}\n\nexport default {\n  setItem,\n  getItem,\n  removeItem\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}