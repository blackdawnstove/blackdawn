{"ast":null,"code":"import { remove as e, set as o, get as n } from \"@analytics/global-storage-utils\";\nvar t = \"cookie\",\n  i = a(),\n  r = d,\n  c = d;\nfunction u(o) {\n  return i ? d(o, \"\", -1) : e(o);\n}\nfunction a() {\n  if (void 0 !== i) return i;\n  var e = \"cookiecookie\";\n  try {\n    d(e, e), i = -1 !== document.cookie.indexOf(e), u(e);\n  } catch (e) {\n    i = !1;\n  }\n  return i;\n}\nfunction d(e, t, r, c, u, a) {\n  if (\"undefined\" != typeof window) {\n    var d = arguments.length > 1;\n    return !1 === i && (d ? o(e, t) : n(e)), d ? document.cookie = e + \"=\" + encodeURIComponent(t) + (r ? \"; expires=\" + new Date(+new Date() + 1e3 * r).toUTCString() + (c ? \"; path=\" + c : \"\") + (u ? \"; domain=\" + u : \"\") + (a ? \"; secure\" : \"\") : \"\") : decodeURIComponent(((\"; \" + document.cookie).split(\"; \" + e + \"=\")[1] || \"\").split(\";\")[0]);\n  }\n}\nexport { t as COOKIE, r as getCookie, a as hasCookies, u as removeCookie, c as setCookie };","map":{"version":3,"mappings":";AAEaA,QAAS;EAElBC,IAAcC;EAOLC,IAAYC;EAQZC,IAAYD;AAAAA,SAMTE,EAAaC;EAC3B,OAAON,IAAcG,EAAOG,GAAM,KAAK,KAAKC,EAAOD;AAAAA;AAAAA,SAOrCL;EACd,SAA2B,MAAhBD,GACT,OAAOA;EAET,IAAMQ,IAAMT;EACZ;IAEEI,EAAOK,GAAKA,IACZR,KAAgD,MAAlCS,SAASN,OAAOO,QAAQF,IAEtCH,EAAaG;EAAAA,CACb,QAAOG;IACPX,KAAc;EAAA;EAEhB,OAAOA;AAAAA;AAwBT,SAASG,EAAOG,GAAMM,GAAOC,GAAKC,GAAMC,GAAQC;EAC9C,IAAsB,sBAAXC,QAAX;IACA,IAAMC,IAAQC,UAAUC,SAAS;IAIjC,QAFoB,MAAhBpB,MAAwBkB,IAASG,EAAIf,GAAMM,KAASU,EAAIhB,KAExDY,IACKT,SAASN,SAASG,IAAO,MAAMiB,mBAAmBX,MAEpDC,IAAY,eAAe,IAAIW,MAAM,IAAIA,SAAgB,MAANX,GAAaY,iBAEhEX,IAAa,YAAYA,IAAjB,OAERC,IAAe,cAAcA,IAAnB,OAEVC,IAAe,aAAL,MANH,MASPU,qBAAqB,OAAOjB,SAASN,QAAQwB,MAAM,OAAOrB,IAAO,KAAK,MAAM,IAAIqB,MAAM,KAAK;EAAA;AAAA;AAAA","names":["COOKIE","isSupported","hasCookies","getCookie","cookie","setCookie","removeCookie","name","remove","tmp","document","indexOf","e","value","ttl","path","domain","secure","window","isSet","arguments","length","set","get","encodeURIComponent","Date","toUTCString","decodeURIComponent","split"],"sources":["/Users/onuryilmaz/Desktop/Workspace/Tokyay/Business/WEB/blackdawn/web/node_modules/@analytics/cookie-utils/src/index.js"],"sourcesContent":["import { get, set, remove } from '@analytics/global-storage-utils'\n\nexport const COOKIE = 'cookie'\n\nlet isSupported = hasCookies()\n\n/**\n * Get a cookie value\n * @param  {string} name - key of cookie\n * @return {string} value of cookie\n */\nexport const getCookie = cookie\n\n/**\n * Set a cookie value\n * @param {string} name  - key of cookie\n * @param {string} value - value of cookie\n * @param {string} days  - days to keep cookie\n */\nexport const setCookie = cookie\n\n/**\n * Remove a cookie value.\n * @param {string} name  - key of cookie\n */\nexport function removeCookie(name) {\n  return isSupported ? cookie(name, '', -1) : remove(name) \n}\n\n/**\n * Check if browser has cookie support\n * @returns {boolean}\n */\nexport function hasCookies() {\n  if (typeof isSupported !== 'undefined') {\n    return isSupported\n  }\n  const tmp = COOKIE + COOKIE\n  try {\n    // Try to set cookie\n    cookie(tmp, tmp)\n    isSupported = document.cookie.indexOf(tmp) !== -1\n    // Cleanup cookie\n    removeCookie(tmp)\n  } catch (e) {\n    isSupported = false\n  }\n  return isSupported\n}\n\n/** \n  * Cookie setter & getter\n  * @version    1.0.4\n  * @date       2015-03-13\n  * @stability  3 - Stable\n  * @author     Lauri Rooden <lauri@rooden.ee>\n  * @license    MIT License\n  * Modified by David Wells\n  * @param {string} name \n  * @param {*} value \n  * @param {*} ttl - Time to live in seconds\n  * @param {*} path - Cookie domain\n  * @param {*} domain - Cookie domain\n  * @param {Boolean} secure - secure cookie\n  * @returns {*} value\n  * @example\n    cookie('test', 'a') // set\n    cookie('test', 'a', 60*60*24, '/api', '*.example.com', true) // complex set - cookie(name, value, ttl, path, domain, secure)\n    cookie('test') // get\n    cookie('test', '', -1) // destroy\n*/\nfunction cookie(name, value, ttl, path, domain, secure) {\n  if (typeof window === 'undefined') return\n  const isSet = arguments.length > 1\n  /* If cookies not supported fallback to global */\n  if (isSupported === false) (isSet) ? set(name, value) : get(name)\n  /* Set values */\n  if (isSet) {\n    return document.cookie = name + '=' + encodeURIComponent(value) +\n      /* Set TTL set expiration on cookie */\n      ((!ttl) ? '' : '; expires=' + new Date(+new Date() + (ttl * 1000)).toUTCString() +\n      // If path set path\n      ((!path) ? '' : '; path=' + path) +\n      // If domain set domain\n      ((!domain) ? '' : '; domain=' + domain) +\n      // If secure set secure\n      ((!secure) ? '' : '; secure'))\n  }\n  /* Get values */\n  return decodeURIComponent((('; ' + document.cookie).split('; ' + name + '=')[1] || '').split(';')[0])\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}