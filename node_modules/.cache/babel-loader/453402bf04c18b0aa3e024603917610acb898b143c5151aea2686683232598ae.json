{"ast":null,"code":"import { hasSupport as l, wrap as o, get as a, set as t, remove as e } from \"@analytics/global-storage-utils\";\nvar r = \"localStorage\",\n  g = l.bind(null, \"localStorage\"),\n  c = o(\"localStorage\", \"getItem\", a),\n  m = o(\"localStorage\", \"setItem\", t),\n  S = o(\"localStorage\", \"removeItem\", e);\nexport { r as LOCAL_STORAGE, c as getItem, g as hasLocalStorage, S as removeItem, m as setItem };","map":{"version":3,"mappings":";AAEMA,QAAgB;EAMhBC,IAAkBC,EAAWC,KAAK,MANlB;EAahBC,IAAUC,EAbM,gBAac,WAAWC;EAQzCC,IAAUF,EArBM,gBAqBc,WAAWG;EAMzCC,IAAaJ,EA3BG,gBA2BiB,cAAcK;AAAAA","names":["LOCAL_STORAGE","hasLocalStorage","hasSupport","bind","getItem","wrap","get","setItem","set","removeItem","remove"],"sources":["/Users/onuryilmaz/Desktop/Workspace/Tokyay/Business/WEB/blackdawn/web/node_modules/@analytics/localstorage-utils/src/index.js"],"sourcesContent":["import { get, set, remove, hasSupport, wrap } from '@analytics/global-storage-utils'\n\nconst LOCAL_STORAGE = 'localStorage'\n\n/**\n * Check if browser has access to LocalStorage\n * @returns {Boolean}\n */\nconst hasLocalStorage = hasSupport.bind(null, LOCAL_STORAGE)\n\n/**\n * Get value from localStorage or fallback to global window\n * @param {string} key - Key of value to get\n * @returns {*} value\n */\nconst getItem = wrap(LOCAL_STORAGE, 'getItem', get)\n\n/**\n * Set value to localStorage or fallback to global window\n * @param {string} key - Key of value to set\n * @param {*} value \n * @returns value\n */\nconst setItem = wrap(LOCAL_STORAGE, 'setItem', set)\n\n/**\n * Remove value from localStorage or fallback to global window\n * @param {string} key - Key of value to remove\n */\nconst removeItem = wrap(LOCAL_STORAGE, 'removeItem', remove)\n\nexport {\n  LOCAL_STORAGE,\n  hasLocalStorage,\n  getItem,\n  setItem,\n  removeItem\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}