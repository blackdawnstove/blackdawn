{"ast":null,"code":"var _jsxFileName = \"/Users/onuryilmaz/Desktop/Workspace/Tokyay/Business/WEB/blackdawn/web/src/util/router.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/*\n  A wrapper around React Router that adds a useRouter() hook so that any component\n  can easily access params, location, history, and trigger navigation.\n  Import from this file instead of react-router-dom directly.\n*/\n\nimport React, { useMemo, useEffect } from \"react\";\nimport { Router as RouterOriginal, useParams, useLocation, useHistory, useRouteMatch } from \"react-router-dom\";\nimport queryString from \"query-string\";\n\n// Use a custom history object and pass to Router so that we\n// can utilize history.listen() where needed (such as for pageview tracking)\nimport { createBrowserHistory } from \"history\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const history = createBrowserHistory();\n\n// Export our <Router> component\n// Includes custom history object and component for auto-scrolling to top\nexport function Router(_ref) {\n  let {\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(RouterOriginal, {\n    history: history,\n    children: [/*#__PURE__*/_jsxDEV(ScrollToTop, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom useRouter hook for getting route data and methods inside any component.\n// NOTE: This hook includes all React Router hooks, which can result in extra re-renders\n// in some cases. When needed, you can optimize performance by importing the specific hook\n// you need (such as useParams or useLocation) instead of this custom useRouter hook.\n_c = Router;\nexport function useRouter() {\n  _s();\n  const params = useParams();\n  const location = useLocation();\n  const history = useHistory();\n  const match = useRouteMatch();\n\n  // Return our custom router object\n  // Memoize so that a new object is only returned if something changes\n  return useMemo(() => {\n    return {\n      params,\n      location,\n      history,\n      match,\n      // For convenience add push(), replace(), pathname at top level\n      push: history.push,\n      replace: history.replace,\n      pathname: location.pathname,\n      // Merge params and parsed query string into single \"query\" object\n      // so that they can be used interchangeably.\n      // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n      query: {\n        ...queryString.parse(location.search),\n        // Convert string to object\n        ...params\n      }\n    };\n  }, [params, match, location, history]);\n}\n\n// Remove or customize if you need more advanced scroll behavior\n// and don't want to always scroll to top when location.pathname changes.\n_s(useRouter, \"Rwg7Mma86I553fS3ZVShWfMSkTE=\", false, function () {\n  return [useParams, useLocation, useHistory, useRouteMatch];\n});\nfunction ScrollToTop() {\n  _s2();\n  const location = useLocation();\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n  return null;\n}\n_s2(ScrollToTop, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n  return [useLocation];\n});\n_c2 = ScrollToTop;\nexport { Route, Switch, Link, NavLink, useParams, useLocation, useHistory, useRouteMatch } from \"react-router-dom\";\nvar _c, _c2;\n$RefreshReg$(_c, \"Router\");\n$RefreshReg$(_c2, \"ScrollToTop\");","map":{"version":3,"names":["React","useMemo","useEffect","Router","RouterOriginal","useParams","useLocation","useHistory","useRouteMatch","queryString","createBrowserHistory","history","children","useRouter","params","location","match","push","replace","pathname","query","parse","search","ScrollToTop","window","scrollTo","Route","Switch","Link","NavLink"],"sources":["/Users/onuryilmaz/Desktop/Workspace/Tokyay/Business/WEB/blackdawn/web/src/util/router.js"],"sourcesContent":["/*\n  A wrapper around React Router that adds a useRouter() hook so that any component\n  can easily access params, location, history, and trigger navigation.\n  Import from this file instead of react-router-dom directly.\n*/\n\nimport React, { useMemo, useEffect } from \"react\";\nimport {\n  Router as RouterOriginal,\n  useParams,\n  useLocation,\n  useHistory,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport queryString from \"query-string\";\n\n// Use a custom history object and pass to Router so that we\n// can utilize history.listen() where needed (such as for pageview tracking)\nimport { createBrowserHistory } from \"history\";\nexport const history = createBrowserHistory();\n\n// Export our <Router> component\n// Includes custom history object and component for auto-scrolling to top\nexport function Router({ children }) {\n  return (\n    <RouterOriginal history={history}>\n      <ScrollToTop />\n      {children}\n    </RouterOriginal>\n  );\n}\n\n// Custom useRouter hook for getting route data and methods inside any component.\n// NOTE: This hook includes all React Router hooks, which can result in extra re-renders\n// in some cases. When needed, you can optimize performance by importing the specific hook\n// you need (such as useParams or useLocation) instead of this custom useRouter hook.\nexport function useRouter() {\n  const params = useParams();\n  const location = useLocation();\n  const history = useHistory();\n  const match = useRouteMatch();\n\n  // Return our custom router object\n  // Memoize so that a new object is only returned if something changes\n  return useMemo(() => {\n    return {\n      params,\n      location,\n      history,\n      match,\n      // For convenience add push(), replace(), pathname at top level\n      push: history.push,\n      replace: history.replace,\n      pathname: location.pathname,\n      // Merge params and parsed query string into single \"query\" object\n      // so that they can be used interchangeably.\n      // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n      query: {\n        ...queryString.parse(location.search), // Convert string to object\n        ...params,\n      },\n    };\n  }, [params, match, location, history]);\n}\n\n// Remove or customize if you need more advanced scroll behavior\n// and don't want to always scroll to top when location.pathname changes.\nfunction ScrollToTop() {\n  const location = useLocation();\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n  return null;\n}\n\nexport {\n  Route,\n  Switch,\n  Link,\n  NavLink,\n  useParams,\n  useLocation,\n  useHistory,\n  useRouteMatch,\n} from \"react-router-dom\";\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AACjD,SACEC,MAAM,IAAIC,cAAc,EACxBC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,aAAa,QACR,kBAAkB;AACzB,OAAOC,WAAW,MAAM,cAAc;;AAEtC;AACA;AACA,SAASC,oBAAoB,QAAQ,SAAS;AAAC;AAC/C,OAAO,MAAMC,OAAO,GAAGD,oBAAoB,EAAE;;AAE7C;AACA;AACA,OAAO,SAASP,MAAM,OAAe;EAAA,IAAd;IAAES;EAAS,CAAC;EACjC,oBACE,QAAC,cAAc;IAAC,OAAO,EAAED,OAAQ;IAAA,wBAC/B,QAAC,WAAW;MAAA;MAAA;MAAA;IAAA,QAAG,EACdC,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACM;AAErB;;AAEA;AACA;AACA;AACA;AAAA,KAZgBT,MAAM;AAatB,OAAO,SAASU,SAAS,GAAG;EAAA;EAC1B,MAAMC,MAAM,GAAGT,SAAS,EAAE;EAC1B,MAAMU,QAAQ,GAAGT,WAAW,EAAE;EAC9B,MAAMK,OAAO,GAAGJ,UAAU,EAAE;EAC5B,MAAMS,KAAK,GAAGR,aAAa,EAAE;;EAE7B;EACA;EACA,OAAOP,OAAO,CAAC,MAAM;IACnB,OAAO;MACLa,MAAM;MACNC,QAAQ;MACRJ,OAAO;MACPK,KAAK;MACL;MACAC,IAAI,EAAEN,OAAO,CAACM,IAAI;MAClBC,OAAO,EAAEP,OAAO,CAACO,OAAO;MACxBC,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ;MAC3B;MACA;MACA;MACAC,KAAK,EAAE;QACL,GAAGX,WAAW,CAACY,KAAK,CAACN,QAAQ,CAACO,MAAM,CAAC;QAAE;QACvC,GAAGR;MACL;IACF,CAAC;EACH,CAAC,EAAE,CAACA,MAAM,EAAEE,KAAK,EAAED,QAAQ,EAAEJ,OAAO,CAAC,CAAC;AACxC;;AAEA;AACA;AAAA,GA9BgBE,SAAS;EAAA,QACRR,SAAS,EACPC,WAAW,EACZC,UAAU,EACZC,aAAa;AAAA;AA2B7B,SAASe,WAAW,GAAG;EAAA;EACrB,MAAMR,QAAQ,GAAGT,WAAW,EAAE;EAC9BJ,SAAS,CAAC,MAAM;IACdsB,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EACvB,CAAC,EAAE,CAACV,QAAQ,CAACI,QAAQ,CAAC,CAAC;EACvB,OAAO,IAAI;AACb;AAAC,IANQI,WAAW;EAAA,QACDjB,WAAW;AAAA;AAAA,MADrBiB,WAAW;AAQpB,SACEG,KAAK,EACLC,MAAM,EACNC,IAAI,EACJC,OAAO,EACPxB,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,aAAa,QACR,kBAAkB;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}